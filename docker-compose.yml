version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: btg-orders-postgres
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: orders_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - btg-orders-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: btg-orders-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - btg-orders-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # BTG Orders Application
  orders-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: btg-orders-service:latest
    container_name: btg-orders-app
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: orders_db
      DB_USERNAME: orders_user
      DB_PASSWORD: orders_pass

      # RabbitMQ Configuration
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest

      # JPA Configuration
      JPA_DDL_AUTO: update
      JPA_SHOW_SQL: false

      # Logging Configuration
      LOG_LEVEL_APP: INFO
      LOG_LEVEL_SQL: WARN
      LOG_LEVEL_ROOT: INFO
      LOG_LEVEL_WEB: INFO
      LOG_LEVEL_AMQP: INFO
      LOG_LEVEL_SQL_PARAMS: WARN

      # Queue Configuration
      ORDERS_QUEUE_NAME: orders.queue
      ORDERS_EXCHANGE: orders.exchange
      ORDERS_ROUTING_KEY: orders.process
      ORDERS_DLQ: orders.dlq
      ORDERS_DLX: orders.dlx

      # Application Configuration
      HEALTH_SHOW_DETAILS: always
      SWAGGER_ENABLED: true
      SERVER_PORT: 8080

    ports:
      - "8080:8080"
    networks:
      - btg-orders-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/btg-orders/actuator/health/liveness || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: btg-orders-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@btg.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - btg-orders-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - tools  # Use: docker-compose --profile tools up

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  btg-orders-network:
    driver: bridge
    name: btg-orders-network